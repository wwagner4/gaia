package gaia

import gaia.X3d._

import java.nio.file.Path

/*
-------------------------------------------------------------------------------
image1_ntsd27

DEF BoundingBox Transform {
  translation 0 0 0
  children Shape {
    geometry Box {
      size 0.0648 0.0648 0.06
    } } }

## Viewpoint
<!-- Generated by view3dscene.
  Use view3dscene "Console -> Print Current Camera..." to generate VRML/X3D code like below.
  Camera settings "encoded" in the X3D declaration below :
    direction 1 0 0
    up 0 0 1
    gravityUp 0 0 1 -->
<Transform
  translation="-0.16 0 0"
  rotation="1 0 0 1.57">
  <!-- the camera position is already expressed by the translation above -->
  <Viewpoint
    position="0 0 0"
    orientation="0 -1 0 1.57"
  />
</Transform>





 */

object Automove {

  case class MoveConfig(
                         id: String,
                         viewpointDistance: Int,
                         cycleInterval: Int,
                         rotation: Vec,
                       )

  case class ImageConfig(
                          imageId: String,
                          resolution: Resolution,
                          frameRate: FrameRate,
                          frameCount: Int,
                          backColor: Color,
                          moves: Seq[MoveConfig],
                        )

  enum Resolution(width: Int, height: Int) {

    def resString = s"${width}x${height}"

    case _4kWide extends Resolution(width = 4098, height = 2160)

    case _4k extends Resolution(width = 3840, height = 2160)

    case UltraHD extends Resolution(width = 2560, height = 1440)

    case FullHD extends Resolution(width = 1920, height = 1080)

    case HD extends Resolution(width = 1280, height = 720)

    case SVGA extends Resolution(width = 800, height = 600)

    case VGA extends Resolution(width = 640, height = 480)

  }

  enum FrameRate(perSecond: Int) {

    def seconds = {
      val sec = 1.0 / perSecond
      "%.3f".format(sec)
    }

    case _60 extends FrameRate(60)

    case _50 extends FrameRate(50)

    case _48 extends FrameRate(48)

    case _30 extends FrameRate(30)

    case _25 extends FrameRate(25)

    case _24 extends FrameRate(24)

  }

  val moveConfigs = Seq(
    "nearEcliptic" -> MoveConfig(
      id = "nearEcliptic",
      viewpointDistance = 20,
      cycleInterval = 40,
      rotation = Vec(0, 5, 110),
    ),
    "t1" -> MoveConfig(
      id = "t1",
      viewpointDistance = 20,
      cycleInterval = 40,
      rotation = Vec(0, 45, 30),
    )
  ).toMap


  val configs = Seq(
    "i1" -> ImageConfig(
      imageId = "image1_gc",
      resolution = Resolution.VGA,
      frameRate = FrameRate._25,
      frameCount = 100,
      backColor = Color.veryDarkRed,
      moves = Seq(moveConfigs("nearEcliptic"))
    ),
    "i1t" -> ImageConfig(
      imageId = "image1_gc",
      resolution = Resolution.VGA,
      frameRate = FrameRate._25,
      frameCount = 100,
      backColor = Color.veryDarkRed,
      moves = Seq(moveConfigs("t1"))
    ),
    "sp8" -> ImageConfig(
      imageId = "image1_sp8",
      resolution = Resolution._4k,
      frameRate = FrameRate._60,
      frameCount = 5000,
      backColor = Color.black,
      moves = Seq(
        moveConfigs("nearEcliptic").copy(cycleInterval = 50), 
        moveConfigs("t1").copy(cycleInterval = 50))
    )
  ).toMap


  override def hashCode(): Int = super.hashCode()

  def test(id: String): Unit = {
    createAutomove("sp8")
  }

  private def createAutomove(cfgId: String) = {
    val cfg = configs(cfgId)
    println(s"Automove: ${cfg.imageId} with $cfg")

    for (moveCfg <- cfg.moves) {
      val htmldir = Path.of("/home/wwagner4/prj/gaia/src/main/html")
      val modelDir = htmldir.resolve("models")
      val modelFile = s"${cfg.imageId}.x3d"
      val gcNorm = Image1.galacicCenter.norm
      val rotAxes = Vec(1, 0, 0)
      val rx = X3d.degToRad(moveCfg.rotation.x)
      val ry = X3d.degToRad(moveCfg.rotation.y)
      val rz = X3d.degToRad(moveCfg.rotation.z)

      val content =
        s"""
           |<X3D  profile='Immersive' version='3.4' >
           |  <Scene>
           |    <WorldInfo title='${cfg.imageId} $cfgId'/>
           |    <Background skyColor='${cfg.backColor.strNoComma}'/>
           |    <Viewpoint	position='0 0 ${moveCfg.viewpointDistance}' description='gaia_vp'/>		
           |    <Transform rotation='1 0 0 $rx'>
           |    <Transform rotation='0 1 0 $ry'>
           |    <Transform rotation='0 0 1 $rz'>
           |    <Transform DEF='object'>
           |     	<Inline bboxCenter='0 0 0' bboxSize='-1 -1 -1' url='$modelFile'/>
           |    </Transform>
           |    </Transform>
           |    </Transform>
           |    </Transform>
           |    <TimeSensor DEF='clock' cycleInterval='${moveCfg.cycleInterval}' loop='true' />
           |    <OrientationInterpolator DEF='spinThings' key='0 0.5 1' keyValue='${rotAxes.strNoComma} 0  ${rotAxes.strNoComma} 3.14159  ${rotAxes.strNoComma} 6.28317'/>
           |    <ROUTE fromNode='clock' fromField='fraction_changed' toNode='spinThings' toField='set_fraction'></ROUTE>
           |    <ROUTE fromNode='spinThings' fromField='value_changed' toNode='object' toField='rotation'></ROUTE>
           |  </Scene>
           |</X3D>
           |""".stripMargin
      val fnameBase = f"automove_${cfg.imageId}_${moveCfg.id}"
      val fname = fnameBase + ".x3d"
      val outfile = modelDir.resolve(fname)
      Util.writeString(outfile, content)
      println(s"Wrote to ${outfile.toAbsolutePath}")
      println("-- bash -----------------------------------------------------------------------------------------")
      println(f"view3dscene ${fname}  --geometry ${cfg.resolution.resString} --screenshot-range 0 ${cfg.frameRate.seconds} ${cfg.frameCount} $fnameBase.mp4")
      println("-------------------------------------------------------------------------------------------------")
    }
  }
}
